
from fastapi import (
    FastAPI,
    Request,
    status,
    Response,
)
from fastapi.responses import StreamingResponse
from contextlib import asynccontextmanager

import uvicorn
import asyncio
import threading
import time
from go2_webrtc_driver.webrtc_driver import WebRTCConnectionMethod
from dog import Dog

GO2_IP_ADDRESS = "192.168.4.200"


dog = Dog(WebRTCConnectionMethod.LocalSTA, ip_address=GO2_IP_ADDRESS)

@asynccontextmanager
async def lifespan(app: FastAPI):
    global dog
    await dog.startup_event()
    yield
    await dog.shutdown_event()

app = FastAPI(lifespan=lifespan)

@app.get("/status/connected")
async def get_connection_status():
    isConnected = dog.check_connection()
    return {"isConnected": isConnected}

@app.get("/status/battery")
async def get_battery_soc():
    return {"battery_soc": dog.get_soc()}

@app.get("/status/current")
def get_battery_current():
    print ("Return current: " + str(dog.get_current()))
    print ("Return ip: " + dog.get_ip_address())
    return {"battery_current": dog.get_current()}

@app.get("/status")
async def get_battery_status():
    return {
        "battery_current": dog.get_current(),
        "battery_soc": dog.get_soc(),
        "isConnected": dog.check_connection()}


@app.post("/connect")
def connect(ip: str = "192.168.4.200"):
    print("API ip input: " + ip)
    dog.set_connection(ip, 2)
    dog.connect()
    
    for _ in range(3):
        time.sleep(1)
        if dog.check_connection():
            print("connection established")
            return Response(status_code=status.HTTP_200_OK)

    return Response(status_code=status.HTTP_408_REQUEST_TIMEOUT)

@app.post("/vui")
async def set_vui(color: str):
    success = dog.set_vui(color)

    if success:
        return Response(status_code=status.HTTP_200_OK)
    else: 
        return Response(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY)
    

    
def generate_cat_picture():
    """
    Generate a cat picture as a byte stream.
    """
    # Simulate generating a cat picture
    time.sleep(1)
    with open("cat.png", "rb") as f:
        image_bytes = f.read()
    return image_bytes
    

@app.get(
    "/raw_image",

    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses = {
        200: {
            "content": {"image/png": {}}
        }
    },

    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response
)
def get_image():
    image_bytes: bytes = generate_cat_picture()
    # media_type here sets the media type of the actual response sent to the client.
    return Response(content=image_bytes, media_type="image/png")


if __name__ == "__main__":
    uvicorn.run("DogAPI:app", host="127.0.0.1", port=8000, reload=True)
